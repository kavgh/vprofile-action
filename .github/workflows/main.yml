name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_NAME: gitops-ecr
  EKS_CLUSTER_NAME: vrpofile-eks

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - name: Maven tests
        run: mvn test

      - name: Maven check style
        run: mvn checkstyle:checkstyle
      
      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup SonarQube
        uses: SonarSource/sonarqube-scan-action@v5
        id: scan
        with:
          args: >
            -Dsonar.host.usrl=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION_NAME }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/
            -Dsonar.junit.reportsPath=target/surefire-reports/
            -Dsonar.jacoco.reportsPath=target/jacoco.exec
            -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: SonarQube Quality Gate
        id: qg
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL
  
  image_build:
    needs: testing
    runs-on: ubuntu-latest
    if: ${{ contains(needs.testing.result, 'success') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push docker image into ECR
        id: build
        run: |
          docker build -t ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.run_number }} -t ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:latest --push .